package server;import settings.Settings;import settings.SettingsManager;import java.io.IOException;import java.net.ServerSocket;import java.net.Socket;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class Server{    public static Settings settings;    static{        settings = SettingsManager.loadSettings();    }    @SuppressWarnings( "InfiniteLoopStatement" )    public static void main( String[] args ) throws IOException{        int port         = Integer.parseInt( args[ 0 ] );        int stoppingPort = Integer.parseInt( args[ 1 ] );        try( ServerSocket requestServerSocket = new ServerSocket( port ) ;             ServerSocket stoppingServerSocket = new ServerSocket( stoppingPort ) ){//            Databases updates thread//            Stopping thread            Executors.newSingleThreadExecutor().execute( () -> {                while( true ){                    try{                        Socket stopSignal = stoppingServerSocket.accept();//                      todo : Останова сервера                    }catch( IOException e ){                        e.printStackTrace();                    }                }            } );//            Request threads            ExecutorService requestService = Executors.newCachedThreadPool();            while( true ){                requestService.execute( new RequestParser( requestServerSocket.accept() ) );            }        }    }    static class RequestParser implements Runnable{        private final Socket socket;        RequestParser( Socket socket ){            this.socket = socket;        }        @Override        public void run(){            try{//                todo: Принятие запросов            }finally{                try{                    socket.close();                }catch( IOException e ){                    e.printStackTrace();                }            }        }    }}